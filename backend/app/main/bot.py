import os
import django
import sys
sys.path.append('/home/creatxr/cyber-mafia/backend/app')

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')
django.setup()

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.exceptions import InvalidQueryID
import re

from main.models import CustomUser, City, Event, Participant, Order, OrderTable
from django.conf import settings
from django.db import close_old_connections, connections
from asgiref.sync import sync_to_async
from django.core.exceptions import ObjectDoesNotExist
import io

API_TOKEN = '7485718014:AAHGbSQCgY7bM1FTLw8SUw-9NWTK7o3CJMo'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    choosing_city = State()
    entering_name = State()
    entering_phone = State()
    uploading_avatar = State()
    editing_profile = State()
    editing_name = State()
    editing_game_name = State()
    editing_city = State()
    editing_phone = State()
    editing_avatar = State()
    afisha_editing_city = State()
    waiting_for_friends_count = State()

class EditFriendsStates(StatesGroup):
    waiting_for_friends_count = State()

class OrderEventStates(StatesGroup):
    confirm_order = State()
    select_event_type = State()
    enter_date = State()
    add_comment = State()

class OrderTableState(StatesGroup):
    confirm_order = State()
    enter_game_name = State()
    enter_real_name = State()
    upload_photo = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /home
@dp.message_handler(commands=['app'])
async def return_to_home(message: types.Message, state: FSMContext):
    await state.finish()
    markup = InlineKeyboardMarkup(row_width=1)
    markup.insert(InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=f'https://t.me/cyber_mafia_dev_bot/dev'))
    await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /home
@dp.message_handler(commands=['home'])
async def return_to_home(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    await sync_to_async(close_old_connections)()
    
    try:
        user, created = await sync_to_async(CustomUser.objects.get_or_create)(username=str(user_id))
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        await sync_to_async(connections['default'].connect)()
        user, created = await sync_to_async(CustomUser.objects.get_or_create)(username=str(user_id))
    
    if created or not user.is_registered:
        await Form.choosing_city.set()
        markup = InlineKeyboardMarkup(row_width=2)
        cities = await sync_to_async(City.objects.all)()
        cities = await sync_to_async(list)(cities)
        for city in cities:
            markup.insert(InlineKeyboardButton(city.name, callback_data=f'city_{city.id}'))
        await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å –∏–≥—Ä–∞—é—Ç –≤ –º–∞—Ñ–∏—é. –ù–∞—à–∏ –∫–ª—É–±—ã –µ—Å—Ç—å –≤ —ç—Ç–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π.", reply_markup=markup)
    else:
        await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data.startswith('city_'), state=Form.choosing_city)
async def process_city(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    city_id = int(callback_query.data.split('_')[1])
    city = await sync_to_async(City.objects.get)(id=city_id)
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=f"{city.name}, –æ—Ç–ª–∏—á–Ω–æ!")
    await bot.send_message(callback_query.from_user.id, "–° –≥–æ—Ä–æ–¥–æ–º —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å, —Ç–µ–ø–µ—Ä—å –ø–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await Form.entering_name.set()
    async with state.proxy() as data:
        data['city_id'] = city_id
        data['main_city_id'] = city_id
        data['user_id'] = callback_query.from_user.id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message_handler(state=Form.entering_name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await Form.entering_phone.set()
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–•–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∏–ª–∏ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(content_types=['contact', 'text'], state=Form.entering_phone)
async def process_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.contact:
            data['phone'] = message.contact.phone_number
        else:
            phone_pattern = re.compile(r'^\+?\d{10,15}$')
            if not phone_pattern.match(message.text):
                await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
                return
            data['phone'] = message.text
    await Form.uploading_avatar.set()
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–ó–∞–≥—Ä—É–∂—É –ø–æ–∑–∂–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ"))
    await bot.send_message(message.chat.id, "–í—Å–µ, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
@dp.message_handler(content_types=['photo', 'text'], state=Form.uploading_avatar)
async def process_avatar(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.photo:
            data['avatar'] = message.photo[-1].file_id
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            file_info = await bot.get_file(data['avatar'])
            file_path = file_info.file_path
            downloaded_file = await bot.download_file(file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é media/avatars/
            with open(f"media/avatars/{data['avatar']}.jpg", 'wb') as new_file:
                new_file.write(downloaded_file.getvalue())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user_id = data['user_id']
            city_id = data['city_id']
            main_city_id = data['main_city_id']
            user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
            user.avatar = f"avatars/{data['avatar']}.jpg"
            user.city = await sync_to_async(City.objects.get)(id=city_id)
            user.main_city = await sync_to_async(City.objects.get)(id=main_city_id)
            user.phone = data['phone']
            user.first_name = data['name']
            user.is_registered = True
            await sync_to_async(user.save)()
        else:
            data['avatar'] = None
            user_id = data['user_id']
            city_id = data['city_id']
            main_city_id = data['main_city_id']
            user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
            user.avatar = None
            user.city = await sync_to_async(City.objects.get)(id=city_id)
            user.main_city = await sync_to_async(City.objects.get)(id=main_city_id)
            user.phone = data['phone']
            user.first_name = data['name']
            user.is_registered = True
            await sync_to_async(user.save)()
    await state.finish()
    await bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ!")
    await bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üî•üî•üî• –í—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –ø—É–Ω–∫—Ç \"–ê—Ñ–∏—à–∏\" —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@dp.message_handler(commands=['profile'], state='*')
async def show_profile(message: types.Message):
    user_id = message.from_user.id
    user_queryset = await sync_to_async(CustomUser.objects.filter)(username=str(user_id))
    user = await sync_to_async(lambda: user_queryset.first())()
    
    if user:
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        msg1 = await bot.send_message(message.from_user.id, "–ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–¥–µ—Å—å", reply_markup=markup)

        city = await sync_to_async(getattr)(user, 'city')
        main_city = await sync_to_async(getattr)(user, 'main_city')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if user.avatar:
            with open(user.avatar.path, 'rb') as photo:
                await bot.send_photo(message.from_user.id, photo)

        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
        profile_info = f"""
–ü—Ä–æ—Ñ–∏–ª—å

–ò–º—è: {user.first_name or '‚ùå'}
–ò–≥—Ä–æ–≤–æ–µ –∏–º—è: {user.game_name or '‚ùå'}
–¢–µ–∫—É—â–∏–π –∫–ª—É–±: {city or '‚ùå'}
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—É–±: {main_city or '‚ùå'}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone or '‚ùå'}
{'–ê–≤–∞—Ç–∞—Ä: ‚ùå' if not user.avatar else ''}
–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: 0

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∞–≤–≥—É—Å—Ç
–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –∏–≥—Ä
"""
        msg2 = await bot.send_message(message.from_user.id, profile_info)

        # –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–µ—Ç, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –∏ "–î–∞, –≤—Å—ë –æ–∫"
        inline_markup = InlineKeyboardMarkup(row_width=2)
        inline_markup.add(InlineKeyboardButton("–ù–µ—Ç, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_profile'), InlineKeyboardButton("–î–∞, –≤—Å—ë –æ–∫", callback_data='profile_ok'))
        msg3 = await bot.send_message(message.from_user.id, "–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=inline_markup)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –≤ FSM
        async with dp.current_state(chat=message.from_user.id, user=message.from_user.id).proxy() as data:
            data['profile_messages'] = [msg1.message_id, msg2.message_id, msg3.message_id, None]
    else:
        await bot.send_message(message.from_user.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", state='*')
async def return_to_main_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data in ['edit_profile', 'profile_ok', 'edit_name', 'edit_game_name', 'edit_city', 'edit_phone', 'edit_avatar', 'afisha_edit_city'])
async def process_callback_profile(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    async with dp.current_state(chat=callback_query.message.chat.id, user=callback_query.from_user.id).proxy() as data:
        msg1_id, msg2_id, msg3_id, msg4_id = [None, None, None, None]
        if 'profile_messages' in data:
            msg1_id, msg2_id, msg3_id, msg4_id = data['profile_messages']
            if callback_query.data == 'edit_profile':
                await bot.edit_message_reply_markup(callback_query.message.chat.id, msg3_id, reply_markup=None)  # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
                new_inline_markup = InlineKeyboardMarkup(row_width=2)
                new_inline_markup.add(
                    InlineKeyboardButton("–ò–º—è", callback_data='edit_name'),
                    InlineKeyboardButton("–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫", callback_data='edit_game_name'),
                    InlineKeyboardButton("–¢–µ–∫—É—â–∏–π –∫–ª—É–±", callback_data='edit_city'),
                    InlineKeyboardButton("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data='edit_phone'),
                    InlineKeyboardButton("–ê–≤–∞—Ç–∞—Ä", callback_data='edit_avatar')
                )
                msg4 = await bot.send_message(callback_query.message.chat.id, "–û–∫, —á—Ç–æ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=new_inline_markup)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –≤ FSM
                async with dp.current_state(chat=callback_query.from_user.id, user=callback_query.from_user.id).proxy() as data:
                    data['profile_messages'] = [msg1_id, msg2_id, msg3_id, msg4.message_id]
        if callback_query.data == 'profile_ok':
            await bot.delete_message(callback_query.message.chat.id, msg2_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
            await bot.delete_message(callback_query.message.chat.id, msg3_id)
            await bot.send_message(callback_query.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())  # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        elif callback_query.data == 'edit_name':
            await Form.editing_name.set()
            if msg4_id:
                await bot.edit_message_reply_markup(callback_query.message.chat.id, msg4_id, reply_markup=None)  # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        elif callback_query.data == 'edit_game_name':
            await Form.editing_game_name.set()
            if msg4_id:
                await bot.edit_message_reply_markup(callback_query.message.chat.id, msg4_id, reply_markup=None)  # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:")
        elif callback_query.data == 'edit_city':
            await Form.editing_city.set()
            markup = InlineKeyboardMarkup(row_width=2)
            cities = await sync_to_async(City.objects.all)()
            cities = await sync_to_async(list)(cities)
            for city in cities:
                markup.insert(InlineKeyboardButton(city.name, callback_data=f'city_{city.id}'))
            if msg4_id:
                await bot.edit_message_reply_markup(callback_query.message.chat.id, msg4_id, reply_markup=None)  # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π –∫–ª—É–±:", reply_markup=markup)
        elif callback_query.data == 'edit_phone':
            await Form.editing_phone.set()
            if msg4_id:
                await bot.edit_message_reply_markup(callback_query.message.chat.id, msg4_id, reply_markup=None)  # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        elif callback_query.data == 'edit_avatar':
            await Form.editing_avatar.set()
            if msg4_id:
                await bot.edit_message_reply_markup(callback_query.message.chat.id, msg4_id, reply_markup=None)  # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            await bot.send_message(callback_query.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä:")
        elif callback_query.data == 'afisha_edit_city':
            await Form.afisha_editing_city.set()
            markup = InlineKeyboardMarkup(row_width=2)
            cities = await sync_to_async(City.objects.all)()
            cities = await sync_to_async(list)(cities)
            for city in cities:
                markup.insert(InlineKeyboardButton(city.name, callback_data=f'city_{city.id}'))
            if msg4_id:
                await bot.edit_message_reply_markup(callback_query.message.chat.id, msg4_id, reply_markup=None)  # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ñ–∏—à–∏", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ
@dp.message_handler(state=Form.editing_name)
async def process_edit_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
    user.first_name = message.text
    await sync_to_async(user.save)()
    await state.finish()
    await show_profile(message)

@dp.message_handler(state=Form.editing_game_name)
async def process_edit_game_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
    user.game_name = message.text
    await sync_to_async(user.save)()
    await state.finish()
    await show_profile(message)

@dp.callback_query_handler(lambda c: c.data.startswith('city_'), state=Form.editing_city)
async def process_edit_city(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    city_id = int(callback_query.data.split('_')[1])
    city = await sync_to_async(City.objects.get)(id=city_id)
    user_id = callback_query.from_user.id
    user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
    user.city = city
    await sync_to_async(user.save)()
    await state.finish()
    await show_profile(callback_query)

@dp.callback_query_handler(lambda c: c.data.startswith('city_'), state=Form.afisha_editing_city)
async def process_afisha_edit_city(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    city_id = int(callback_query.data.split('_')[1])
    city = await sync_to_async(City.objects.get)(id=city_id)
    await state.finish()
    await send_afisha(callback_query.message, city=city)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
@dp.message_handler(state=Form.editing_phone)
async def process_edit_phone(message: types.Message, state: FSMContext):
    phone_pattern = re.compile(r'^\+?\d{10,15}$')
    if not phone_pattern.match(message.text):
        await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890 –∏–ª–∏ 1234567890.")
        return
    
    user_id = message.from_user.id
    user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
    user.phone = message.text
    await sync_to_async(user.save)()
    await state.finish()
    await show_profile(message)

@dp.message_handler(content_types=['photo'], state=Form.editing_avatar)
async def process_edit_avatar(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
    # –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    file_info = await bot.get_file(message.photo[-1].file_id)
    file_path = file_info.file_path
    downloaded_file = await bot.download_file(file_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é media/avatars/
    with open(f"media/avatars/{message.photo[-1].file_id}.jpg", 'wb') as new_file:
        new_file.write(downloaded_file.getvalue())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user.avatar = f"avatars/{message.photo[-1].file_id}.jpg"
    await sync_to_async(user.save)()
    await state.finish()
    await show_profile(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /afisha
@dp.message_handler(commands=['afisha'])
async def send_afisha(message: types.Message, city=None):
    user_id = message.chat.id
    user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Ç–µ–∫—É—â–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if city is None:
        city = await sync_to_async(getattr)(user, 'city')
    else:
        await bot.delete_message(message.chat.id, message.message_id)
    events = await sync_to_async(Event.objects.filter)(city=city)
    events = await sync_to_async(list)(events)
    if len(events) == 0:
        await bot.send_message(message.chat.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ñ–∏—à –Ω–µ—Ç.\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")
        return
    event_buttons = [types.InlineKeyboardButton(event.name, callback_data=f'event_{event.id}') for event in events]
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    afisha_message = f"""
–ù–∏–∫: {user.game_name or '–ò–≥–æ—Ä—å'}
–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {user.games_played or 0}
–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {user.points_earned or 0}

–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {user.games_played_this_month or 0}

–ò–≥—Ä–æ–≤—ã—Ö –≤–µ—á–µ—Ä–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {user.game_evenings_this_month or 0}

–°—Ç–∞—Ç—É—Å: –ò–≥—Ä–æ–∫

–í–∞—à —Å—Ç–∞—Ç—É—Å –ò–≥—Ä–æ–∫–∞ –¥–∞–µ—Ç –≤–∞–º —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:

üìç–°–∫–∏–¥–æ—á–Ω—É—é –∫–∞—Ä—Ç—É –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –ú—è—Ç–Ω—ã–π –ï–Ω–æ—Ç –Ω–∞ 5%
üìç–£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤ –∑–∞ 1,2,3 –º–µ—Å—Ç–æ –Ω–∞ –∫–∞–∂–¥–æ–º –∏–≥—Ä–æ–≤–æ–º –≤–µ—á–µ—Ä–µ

–í–ê–ñ–ù–û: –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏, –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ (–∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ –Ω–µ –º–µ–Ω–µ–µ 1 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü)

*–ï—Å–ª–∏ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –∫–ª—É–±–∞ (–æ—Ç 50 –∏–≥—Ä –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ), —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —à–æ—É –ú–∞—Ñ–∏—è –ë–∞–ª–∞–≥–∞–Ω, –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∏–≥—Ä—É –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –ú—è—Ç–Ω—ã–π –ï–Ω–æ—Ç, –æ–¥–Ω—É –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–µ—Å–Ω—é –Ω–∞ –≤—ã–±–æ—Ä (–≤ –º–µ—Å—è—Ü) –∏ –¥—Ä.

–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –Ω–∏–∂–µ‚¨áÔ∏è
"""
    await bot.send_message(message.chat.id, afisha_message)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞–∑–æ–º
    photo_paths = [
        os.path.join(settings.BASE_DIR, 'path_to_photo1.jpg'),
        os.path.join(settings.BASE_DIR, 'path_to_photo2.jpg'),
        os.path.join(settings.BASE_DIR, 'path_to_photo3.jpg'),
        os.path.join(settings.BASE_DIR, 'path_to_photo4.jpg')
    ]
    media = [types.InputMediaPhoto(open(photo_path, 'rb')) for photo_path in photo_paths]
    await bot.send_media_group(message.chat.id, media)

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(*event_buttons)
    markup.add(
        types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data='order_event'),
        types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data='afisha_edit_city')
    )
    await bot.send_message(message.chat.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∞–≤–≥—É—Å—Ç\n–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —É —Ç–µ–±—è –µ—â–µ –Ω–µ –±—ã–ª–æ –∏–≥—Ä\n–°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, –≤—ã–±–∏—Ä–∞–π, –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Å—è!", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@dp.callback_query_handler(lambda c: c.data.startswith('event_'))
async def show_event(callback_query: types.CallbackQuery):
    event_id = int(callback_query.data.split('_')[1])
    event = await sync_to_async(Event.objects.get)(id=event_id)

    # –ü–æ–ª—É—á–∞–µ–º city –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    city = await sync_to_async(getattr)(event, 'city')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    event_queryset_previous = await sync_to_async(Event.objects.filter)(city=city, id__lt=event_id)
    has_previous = await sync_to_async(lambda qs: qs.exists())(event_queryset_previous)

    event_queryset_next = await sync_to_async(Event.objects.filter)(city=city, id__gt=event_id)
    has_next = await sync_to_async(lambda qs: qs.exists())(event_queryset_next)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ Participant –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await sync_to_async(CustomUser.objects.get)(username=callback_query.message.chat.id)
    participant = await sync_to_async(Participant.objects.filter)(user=user, event=event)
    participant = await sync_to_async(lambda qs: qs.first())(participant)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    event_message = f"""{event.description}"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    markup = types.InlineKeyboardMarkup(row_width=2)
    if has_previous:
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'prev_{event_id}'))
    if has_next:
        markup.add(types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è", callback_data=f'next_{event_id}'))
    markup.add(
        types.InlineKeyboardButton(f"–ò–≥—Ä–æ–∫–∏ {event.current_players}/{event.max_players}", callback_data=f'players_{event_id}')
    )
    if participant:
        markup.add(
            types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å –±—Ä–æ–Ω—å", callback_data=f'remove_booking_{event_id}'),
            types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å/–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞", callback_data=f'edit_friends_{event_id}')
        )
    else:
        markup.add(
            types.InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f'signup_{event_id}')
        )
    markup.add(
        types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data='afisha_edit_city')
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if event.image:
        with open(event.image.path, 'rb') as photo:
            await bot.send_photo(callback_query.message.chat.id, photo, caption=event_message, reply_markup=markup)
    else:
        await bot.send_message(callback_query.message.chat.id, event_message, reply_markup=markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è InvalidQueryID
    try:
        await bot.answer_callback_query(callback_query.id)
    except InvalidQueryID:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda c: c.data.startswith('prev_'))
async def prev_event(callback_query: types.CallbackQuery):
    current_event_id = int(callback_query.data.split('_')[1])
    current_event = await sync_to_async(Event.objects.get)(id=current_event_id)
    
    # –ü–æ–ª—É—á–∞–µ–º city –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    city = await sync_to_async(getattr)(current_event, 'city')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    event_queryset = await sync_to_async(Event.objects.filter)(city=city, id__lt=current_event_id)
    previous_event = await sync_to_async(lambda qs: qs.order_by('-id').first())(event_queryset)

    if previous_event:
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        await show_event(types.CallbackQuery(data=f'event_{previous_event.id}', message=callback_query.message))
    else:
        await bot.send_message(callback_query.message.chat.id, "–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ —Å–ø–∏—Å–∫–µ.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è InvalidQueryID
    try:
        await bot.answer_callback_query(callback_query.id)
    except InvalidQueryID:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è"
@dp.callback_query_handler(lambda c: c.data.startswith('next_'))
async def next_event(callback_query: types.CallbackQuery):
    current_event_id = int(callback_query.data.split('_')[1])
    current_event = await sync_to_async(Event.objects.get)(id=current_event_id)
    
    # –ü–æ–ª—É—á–∞–µ–º city –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    city = await sync_to_async(getattr)(current_event, 'city')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    event_queryset = await sync_to_async(Event.objects.filter)(city=city, id__gt=current_event_id)
    next_event = await sync_to_async(lambda qs: qs.order_by('id').first())(event_queryset)

    if next_event:
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        await show_event(types.CallbackQuery(data=f'event_{next_event.id}', message=callback_query.message))
    else:
        await bot.send_message(callback_query.message.chat.id, "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ —Å–ø–∏—Å–∫–µ.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è InvalidQueryID
    try:
        await bot.answer_callback_query(callback_query.id)
    except InvalidQueryID:
        pass

@dp.callback_query_handler(lambda c: c.data.startswith('players_'))
async def show_players(callback_query: types.CallbackQuery):
    event_id = int(callback_query.data.split('_')[1])
    event = await sync_to_async(Event.objects.get)(id=event_id)

    if event.current_players == 0:
        await bot.send_message(callback_query.message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ")
    else:
        participants = await sync_to_async(event.participants.all)()
        participants = await sync_to_async(list)(participants)
        media = []
        players_message = "** –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: **\n"
        for idx, participant in enumerate(participants, start=1):
            user = await sync_to_async(getattr)(participant, 'user')
            if participant.friends_count == 0 and participant.user.game_name:
                additional_info = f'({participant.user.game_name})'
            elif participant.friends_count == 0 and not participant.user.game_name:
                additional_info = ''
            else:
                additional_info = f'+{participant.friends_count}'
            players_message += f"{idx}. {participant.user.first_name} {additional_info}\n"
            if user.avatar:
                with open(user.avatar.path, 'rb') as photo:
                    photo_data = io.BytesIO(photo.read())
                    media.append(types.InputMediaPhoto(media=photo_data))

        await bot.send_message(callback_query.message.chat.id, players_message)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø–æ–π
        if media:
            await bot.send_media_group(callback_query.message.chat.id, media)

    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith('signup_'))
async def signup_for_event(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split('_')[1])
    event = await sync_to_async(Event.objects.get)(id=event_id)

    if event.current_players < event.max_players:
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("–Ø –æ–¥–∏–Ω", callback_data=f'friends_0_{event_id}'),
            types.InlineKeyboardButton("+1", callback_data=f'friends_1_{event_id}'),
            types.InlineKeyboardButton("+2", callback_data=f'friends_2_{event_id}'),
            types.InlineKeyboardButton("+3", callback_data=f'friends_3_{event_id}')
        )
        await bot.send_message(callback_query.message.chat.id, "–°–∫–æ–ª—å–∫–æ —Å –í–∞–º–∏ –±—É–¥–µ—Ç –¥—Ä—É–∑–µ–π? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–æ 10:", reply_markup=markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        async with state.proxy() as data:
            data['event_id'] = event_id
        
        await Form.waiting_for_friends_count.set()
    else:
        await bot.send_message(callback_query.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –º–µ—Å—Ç–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç—ã.")

    await bot.answer_callback_query(callback_query.id)
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=Form.waiting_for_friends_count)
async def process_friends_count(message: types.Message, state: FSMContext):
    try:
        friends_count = int(message.text)
        if 0 <= friends_count <= 10:
            async with state.proxy() as data:
                event_id = data['event_id']
                event = await sync_to_async(Event.objects.get)(id=event_id)
                user = await sync_to_async(CustomUser.objects.get)(username=message.from_user.id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ Participant
                participant, created = await sync_to_async(Participant.objects.get_or_create)(user=user, event=event)
                if created:
                    participant.friends_count = friends_count
                    await sync_to_async(participant.save)()
                event.current_players = friends_count + 1
                await sync_to_async(event.save)()

                await bot.send_message(message.chat.id, f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event.name}' —Å {friends_count} –¥—Ä—É–∑—å—è–º–∏.")
                await state.finish()
                await show_event(types.CallbackQuery(data=f'event_{event.id}', message=message))
        else:
            await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
    except ValueError:
        await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")

@dp.callback_query_handler(lambda c: c.data.startswith('friends_'), state=Form.waiting_for_friends_count)
async def process_friends_count_callback(callback_query: types.CallbackQuery, state: FSMContext):
    friends_count = int(callback_query.data.split('_')[1])
    event_id = int(callback_query.data.split('_')[2])

    event = await sync_to_async(Event.objects.get)(id=event_id)
    user = await sync_to_async(CustomUser.objects.get)(username=callback_query.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ Participant
    participant, created = await sync_to_async(Participant.objects.get_or_create)(user=user, event=event)
    if created:
        participant.friends_count = friends_count
        await sync_to_async(participant.save)()
    event.current_players = friends_count + 1
    await sync_to_async(event.save)()

    await bot.send_message(callback_query.message.chat.id, f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event.name}' —Å {friends_count} –¥—Ä—É–∑—å—è–º–∏.")
    await bot.answer_callback_query(callback_query.id)
    await state.finish()
    await show_event(types.CallbackQuery(data=f'event_{event.id}', message=callback_query.message))

@dp.callback_query_handler(lambda c: c.data.startswith('edit_friends_'))
async def edit_friends_for_event(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split('_')[2])
    event = await sync_to_async(Event.objects.get)(id=event_id)

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–Ø –æ–¥–∏–Ω", callback_data=f'edit_friends_0_{event_id}'),
        types.InlineKeyboardButton("+1", callback_data=f'edit_friends_1_{event_id}'),
        types.InlineKeyboardButton("+2", callback_data=f'edit_friends_2_{event_id}'),
        types.InlineKeyboardButton("+3", callback_data=f'edit_friends_3_{event_id}')
    )
    await bot.send_message(callback_query.message.chat.id, "–°–∫–æ–ª—å–∫–æ —Å –í–∞–º–∏ –±—É–¥–µ—Ç –¥—Ä—É–∑–µ–π? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–æ 10:", reply_markup=markup)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    async with state.proxy() as data:
        data['event_id'] = event_id

    await EditFriendsStates.waiting_for_friends_count.set()
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=EditFriendsStates.waiting_for_friends_count)
async def process_edit_friends_count(message: types.Message, state: FSMContext):
    try:
        friends_count = int(message.text)
        if 0 <= friends_count <= 10:
            async with state.proxy() as data:
                event_id = data['event_id']
                event = await sync_to_async(Event.objects.get)(id=event_id)
                user = await sync_to_async(CustomUser.objects.get)(username=message.from_user.id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ Participant
                participant = await sync_to_async(Participant.objects.get)(user=user, event=event)
                participant.friends_count = friends_count
                await sync_to_async(participant.save)()
                event.current_players = friends_count + 1
                await sync_to_async(event.save)()

                await bot.send_message(message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{event.name}' –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {friends_count}.")
                await state.finish()
                await show_event(types.CallbackQuery(data=f'event_{event.id}', message=message))
        else:
            await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
    except ValueError:
        await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")

@dp.callback_query_handler(lambda c: c.data.startswith('edit_friends_'), state=EditFriendsStates.waiting_for_friends_count)
async def process_edit_friends_count_callback(callback_query: types.CallbackQuery, state: FSMContext):
    friends_count = int(callback_query.data.split('_')[2])
    event_id = int(callback_query.data.split('_')[3])

    event = await sync_to_async(Event.objects.get)(id=event_id)
    user = await sync_to_async(CustomUser.objects.get)(username=callback_query.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ Participant
    participant = await sync_to_async(Participant.objects.get)(user=user, event=event)
    participant.friends_count = friends_count
    await sync_to_async(participant.save)()
    event.current_players = friends_count + 1
    await sync_to_async(event.save)()

    await bot.send_message(callback_query.message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{event.name}' –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {friends_count}.")
    await bot.answer_callback_query(callback_query.id)
    await state.finish()
    await show_event(types.CallbackQuery(data=f'event_{event.id}', message=callback_query.message))

@dp.callback_query_handler(lambda c: c.data.startswith('remove_booking_'))
async def remove_booking(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split('_')[2])
    event = await sync_to_async(Event.objects.get)(id=event_id)
    user = await sync_to_async(CustomUser.objects.get)(username=callback_query.message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ Participant –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    participant = await sync_to_async(Participant.objects.filter)(user=user, event=event)
    participant = await sync_to_async(lambda qs: qs.first())(participant)

    if participant:
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –∏ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        event.current_players -= (participant.friends_count + 1)
        await sync_to_async(event.save)()

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å Participant
        await sync_to_async(participant.delete)()

        await bot.send_message(callback_query.message.chat.id, "–ë—Ä–æ–Ω—å —Å–Ω—è—Ç–∞.")
    else:
        await bot.send_message(callback_query.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏ –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")

    await bot.answer_callback_query(callback_query.id)

    await state.finish()
    await show_event(types.CallbackQuery(data=f'event_{event.id}', message=callback_query.message))

@dp.callback_query_handler(lambda c: c.data == 'order_event')
async def order_event(callback_query: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–î–∞", callback_data='confirm_order_yes'),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data='confirm_order_no')
    )
    await bot.send_message(callback_query.message.chat.id, "–ó–∞–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?", reply_markup=markup)
    await OrderEventStates.confirm_order.set()
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'confirm_order_yes', state=OrderEventStates.confirm_order)
async def confirm_order_yes(callback_query: types.CallbackQuery, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤")
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
    await OrderEventStates.select_event_type.set()
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'confirm_order_no', state=OrderEventStates.confirm_order)
async def confirm_order_no(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.send_message(callback_query.message.chat.id, "–•–æ—Ä–æ—à–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await state.finish()
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=OrderEventStates.select_event_type)
async def select_event_type(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['event_type'] = message.text
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    await OrderEventStates.enter_date.set()

@dp.message_handler(state=OrderEventStates.enter_date)
async def enter_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date'] = message.text
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data='add_comment'),
        types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='finish_order'),
        types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='cancel_order')
    )
    await bot.send_message(message.chat.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
    await OrderEventStates.add_comment.set()

@dp.callback_query_handler(lambda c: c.data == 'add_comment', state=OrderEventStates.add_comment)
async def add_comment(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ")
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=OrderEventStates.add_comment)
async def enter_comment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['comment'] = message.text
        user = await sync_to_async(CustomUser.objects.get)(username=message.from_user.id)
        await sync_to_async(Order.objects.create)(
            user=user,
            event_type=data['event_type'],
            date=data['date'],
            comment=data['comment']
        )
    await bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'finish_order', state=OrderEventStates.add_comment)
async def finish_order(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        user = await sync_to_async(CustomUser.objects.get)(username=callback_query.from_user.id)
        await sync_to_async(Order.objects.create)(
            user=user,
            event_type=data['event_type'],
            date=data['date'],
            comment=data.get('comment', '')
        )
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.send_message(callback_query.message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è")
    await state.finish()
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'cancel_order', state=OrderEventStates.add_comment)
async def cancel_order(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.send_message(callback_query.message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")
    await state.finish()
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /statistic
@dp.message_handler(commands=['statistic'])
async def send_statistic_link(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url="https://google.com"))
    await bot.send_message(message.chat.id, "–û–∫, –¥–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /myclub
@dp.message_handler(commands=['myclub'])
async def send_myclub_link(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url="https://google.com"))
    await bot.send_message(message.chat.id, "–û–∫, –¥–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rules
@dp.message_handler(commands=['rules'])
async def send_rules_link(message: types.Message):
    await bot.send_message(message.chat.id, "https://vk.com/video-220900079_456239091")

@dp.message_handler(commands=['order'])
async def order_table(message: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–î–∞", callback_data='confirm_order_yes'),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data='confirm_order_no')
    )
    await bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑–∞—Ç—å –∏–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—á–∫—É?", reply_markup=markup)
    await OrderTableState.confirm_order.set()

@dp.callback_query_handler(lambda c: c.data == 'confirm_order_yes', state=OrderTableState.confirm_order)
async def confirm_order_yes(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id, reply_markup=None)
    await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ò–≥—Ä–æ–≤–æ–µ –∏–º—è (–ù–∏–∫–Ω–µ–π–º)")
    await OrderTableState.enter_game_name.set()
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'confirm_order_no', state=OrderTableState.confirm_order)
async def confirm_order_no(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.send_message(callback_query.message.chat.id, "–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await state.finish()
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=OrderTableState.enter_game_name)
async def enter_game_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['game_name'] = message.text
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è")
    await OrderTableState.enter_real_name.set()

@dp.message_handler(state=OrderTableState.enter_real_name)
async def enter_real_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['real_name'] = message.text
    await bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –Ω–∞ –≤–∞—à–µ–π –∏–º–µ–Ω–Ω–æ —Ç–∞–±–ª–∏—á–∫–µ")
    await OrderTableState.upload_photo.set()

@dp.message_handler(content_types=types.ContentTypes.PHOTO, state=OrderTableState.upload_photo)
async def upload_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[-1].file_id
        user = await sync_to_async(CustomUser.objects.get)(username=message.from_user.id)
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        file_info = await bot.get_file(data['photo'])
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é media/order_tables/
        with open(f"media/order_tables/{data['photo']}.jpg", 'wb') as new_file:
            new_file.write(downloaded_file.getvalue())
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await sync_to_async(OrderTable.objects.create)(
            user=user,
            game_name=data['game_name'],
            real_name=data['real_name'],
            photo=f"order_tables/{data['photo']}.jpg"
        )
        
    await bot.send_message(message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º –∏–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—á–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ –º–∞—Ñ–∏—é –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏")
    await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)