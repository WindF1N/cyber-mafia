import os
import django
import sys
sys.path.append('/home/creatxr/cyber-mafia/backend/app')

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')
django.setup()

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.exceptions import InvalidQueryID
import re

from main.models import CustomUser, City, Game, Participant, Peculiarity
from django.conf import settings
from django.db import close_old_connections, connections
from asgiref.sync import sync_to_async
from django.core.exceptions import ObjectDoesNotExist
from main.utils import update_messages
import io

API_TOKEN = '7485718014:AAHGbSQCgY7bM1FTLw8SUw-9NWTK7o3CJMo'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    choosing_city = State()
    entering_name = State()
    entering_phone = State()
    uploading_avatar = State()
    editing_profile = State()
    editing_name = State()
    editing_game_name = State()
    editing_city = State()
    editing_phone = State()
    editing_avatar = State()
    afisha_editing_city = State()

@dp.callback_query_handler(lambda c: c.data == 'go_main')
async def return_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    msg = await bot.send_message(callback_query.message.chat.id, "–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=types.ReplyKeyboardRemove())\
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, callback_query.message.chat.id, [msg.message_id])

@dp.callback_query_handler(lambda c: c.data == 'go_poster')
async def return_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await send_afisha(callback_query.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /home
@dp.message_handler(commands=['webapp'])
async def return_to_home(message: types.Message, state: FSMContext):
    await state.finish()
    markup = InlineKeyboardMarkup(row_width=1)
    markup.insert(InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=f'https://t.me/cyber_mafia_dev_bot/dev'))
    msg = await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", reply_markup=markup)
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, message.chat.id, [message.message_id, msg.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /home
@dp.message_handler(commands=['home'])
async def return_to_home(message: types.Message, state: FSMContext):
    await state.finish()
    msg = await bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, message.chat.id, [message.message_id, msg.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    await sync_to_async(close_old_connections)()
    
    try:
        user, created = await sync_to_async(CustomUser.objects.get_or_create)(username=str(user_id))
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        await sync_to_async(connections['default'].connect)()
        user, created = await sync_to_async(CustomUser.objects.get_or_create)(username=str(user_id))
    
    if created or not user.is_registered:
        await Form.choosing_city.set()
        markup = InlineKeyboardMarkup(row_width=2)
        cities = await sync_to_async(City.objects.all)()
        cities = await sync_to_async(list)(cities)
        for city in cities:
            markup.insert(InlineKeyboardButton(city.name, callback_data=f'city_{city.id}'))
        msg = await bot.send_message(message.chat.id, """
üåÜ–ì–ª–∞–≤–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ !
                               
üñ•Ô∏è <b>–•–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å Cyber Mafia –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ?</b>
                               
–£ –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–±—è! –û—Ñ–æ—Ä–º–∏ —Ñ—Ä–∞–Ω—à–∏–∑—É –∏ —Å—Ç–∞–Ω—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ –∫–∏–±–µ—Ä-–∫–ª–∞–Ω–∞. –£–∑–Ω–∞–π –±–æ–ª—å—à–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ:
                               
cyberpunkmafia.ru
                               
üîó –ñ–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ —É–∑–Ω–∞–π, –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å Cyber Mafia –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ! üöÄ
""", reply_markup=markup, parse_mode="HTML")
    else:
        msg = await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, message.chat.id, [message.message_id, msg.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data.startswith('city_'), state=Form.choosing_city)
async def process_city(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    city_id = int(callback_query.data.split('_')[1])
    city = await sync_to_async(City.objects.get)(id=city_id)
    msg1 = await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=f"{city.name}, –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üéâ")
    msg2 = await bot.send_message(callback_query.from_user.id, """
–¢–µ–ø–µ—Ä—å —Ç—ã –≤ —à–∞–≥–µ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä—ã Cyber Mafia! ü§ñ

üñãÔ∏è <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è, —á—Ç–æ–±—ã –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å. –ü–æ—Ä–∞ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –∫–∏–±–µ—Ä–ø–∞–Ω–∫–∞ –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω –Ω–∞—Å—Ç–æ—è—â–µ–π –º–∞—Ñ–∏–∏ –±—É–¥—É—â–µ–≥–æ! ‚ö°
                           
‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –≤—Å—ë –¥–ª—è —Ç–≤–æ–µ–≥–æ —É—á–∞—Å—Ç–∏—è.
""", parse_mode="HTML")
    await Form.entering_name.set()
    async with state.proxy() as data:
        data['city_id'] = city_id
        data['main_city_id'] = city_id
        data['user_id'] = callback_query.from_user.id
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, callback_query.message.chat.id, [msg1.message_id, msg2.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message_handler(state=Form.entering_name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await Form.entering_phone.set()
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Äüì±", request_contact=True))
    msg = await bot.send_message(message.chat.id, """
üîç <b>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b>
                           
–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! üì≤
                           
üìû <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.
                           
üëâ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –µ–≥–æ –≤ —á–∞—Ç.                           
""", reply_markup=markup, parse_mode="HTML")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, message.chat.id, [message.message_id, msg.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(content_types=['contact', 'text'], state=Form.entering_phone)
async def process_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.contact:
            data['phone'] = message.contact.phone_number
        else:
            phone_pattern = re.compile(r'^\+?\d{10,15}$')
            if not phone_pattern.match(message.text):
                msg = await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                await update_messages(bot, message.chat.id, [message.message_id, msg.message_id])
                return
            data['phone'] = message.text
    await Form.uploading_avatar.set()
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–ü–æ–∑–∂–µ"))
    msg = await bot.send_message(message.chat.id, """
üñºÔ∏è <b>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä!</b>
                           
–î–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å —Ç–µ–±—è, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä. –≠—Ç–æ –±—É–¥–µ—Ç —Ç–≤–æ—ë –ª–∏—Ü–æ –≤ –º–∏—Ä–µ Cyber Mafia! üòé
                           
üì∏ <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä.
""", reply_markup=markup, parse_mode="HTML")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, message.chat.id, [message.message_id, msg.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
@dp.message_handler(content_types=['photo', 'text'], state=Form.uploading_avatar)
async def process_avatar(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.photo:
            data['avatar'] = message.photo[-1].file_id
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            file_info = await bot.get_file(data['avatar'])
            file_path = file_info.file_path
            downloaded_file = await bot.download_file(file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é media/avatars/
            with open(f"media/avatars/{data['avatar']}.jpg", 'wb') as new_file:
                new_file.write(downloaded_file.getvalue())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user_id = data['user_id']
            city_id = data['city_id']
            main_city_id = data['main_city_id']
            user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
            user.avatar = f"avatars/{data['avatar']}.jpg"
            user.city = await sync_to_async(City.objects.get)(id=city_id)
            user.main_city = await sync_to_async(City.objects.get)(id=main_city_id)
            user.phone = data['phone']
            user.first_name = data['name']
            user.is_registered = True
            await sync_to_async(user.save)()
            msg = "‚úÖ –ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        else:
            data['avatar'] = None
            user_id = data['user_id']
            city_id = data['city_id']
            main_city_id = data['main_city_id']
            user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
            user.avatar = None
            user.city = await sync_to_async(City.objects.get)(id=city_id)
            user.main_city = await sync_to_async(City.objects.get)(id=main_city_id)
            user.phone = data['phone']
            user.first_name = data['name']
            user.is_registered = True
            await sync_to_async(user.save)()
            msg = "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    await state.finish()
    msg1 = await bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ!")
    msg2 = await bot.send_message(message.chat.id, f"""
<b>{msg}</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä Cyber Mafia! üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫–∞. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:

üåê <b>–ü–µ—Ä–µ–π—Ç–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b> ‚Äî –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∏–≥—Ä—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.

/webapp - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–∏–ª–∏

ü§ñ <b>–û—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ</b> ‚Äî —Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ñ–∏—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä—è–º–æ –∑–¥–µ—Å—å!

/poster - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ñ–∏—à—É –∏–≥—Ä

üéÆ <b>–í—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π! –ì–æ—Ç–æ–≤—å—Å—è –∫ –∏–≥—Ä–µ –∏ –±—É–¥—å –Ω–∞—á–µ–∫—É ‚Äî –º–∏—Ä Cyber Mafia –ø–æ–ª–æ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ –∏ –≤—ã–∑–æ–≤–æ–≤!</b>
""", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, message.chat.id, [message.message_id, msg1.message_id, msg2.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@dp.message_handler(commands=['profile'], state='*')
async def show_profile(message: types.Message):
    user_id = message.from_user.id
    user_queryset = await sync_to_async(CustomUser.objects.filter)(username=str(user_id))
    user = await sync_to_async(lambda: user_queryset.first())()
    
    if user:
        city = await sync_to_async(getattr)(user, 'city')
        district = await sync_to_async(getattr)(user, 'district')
        level = await sync_to_async(getattr)(user, 'level')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if user.avatar:
            with open(user.avatar.path, 'rb') as photo:
                msg = await bot.send_photo(message.from_user.id, photo)

        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
        profile_info = f"""
üßë‚Äçüíª <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ Cyber Mafia</b>

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—ë —Ç–∞–∫, –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ! üîß
    –ê–≤–∞—Ç–∞—Ä: {f'[–≤—ã—à–µ] üñºÔ∏è' if user.avatar else ''}
    –ü–æ–ª: {user.sex or ''}
    –ò–º—è: {f'{user.first_name} üè∑Ô∏è' or ''}
    –¢–µ–ª–µ—Ñ–æ–Ω: {f'{user.phone} üìû' or ''}
    –ì–æ—Ä–æ–¥: {f'{city} üåÜ' or ''}
    –†–∞–π–æ–Ω: {district or ''}
    –ù–∏–∫–Ω–µ–π–º: {user.nickname or ''}
    –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞: {level or ''}

üëâ –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ.
"""
        inline_markup = InlineKeyboardMarkup(row_width=1)
        inline_markup.add(
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è ‚úèÔ∏è", callback_data='edit_name'),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ù–∏–∫–Ω–µ–π–º", callback_data='edit_game_name'),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üèôÔ∏è", callback_data='edit_city'),
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì±", callback_data='edit_phone'),
            InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä üì∑", callback_data='edit_avatar')
        )
        msg1 = await bot.send_message(message.from_user.id, profile_info, parse_mode='HTML', reply_markup=inline_markup)

        inline_markup = InlineKeyboardMarkup(row_width=1)
        inline_markup.add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô", callback_data='go_main'))
        msg2 = await bot.send_message(message.from_user.id, "<b>üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=inline_markup, parse_mode='HTML')
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_messages(bot, message.chat.id, [message.message_id, msg.message_id, msg1.message_id, msg2.message_id])
    else:
        msg = await bot.send_message(message.from_user.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /start.")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_messages(bot, message.chat.id, [message.message_id, msg.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data in ['edit_profile', 'profile_ok', 'edit_name', 'edit_game_name', 'edit_city', 'edit_phone', 'edit_avatar', 'afisha_edit_city'])
async def process_callback_profile(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    async with dp.current_state(chat=callback_query.message.chat.id, user=callback_query.from_user.id).proxy() as data:
        if callback_query.data == 'edit_name':
            await Form.editing_name.set()
            msg = await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        elif callback_query.data == 'edit_game_name':
            await Form.editing_game_name.set()
            msg = await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:")
        elif callback_query.data == 'edit_city':
            await Form.editing_city.set()
            markup = InlineKeyboardMarkup(row_width=2)
            cities = await sync_to_async(City.objects.all)()
            cities = await sync_to_async(list)(cities)
            for city in cities:
                markup.insert(InlineKeyboardButton(city.name, callback_data=f'city_{city.id}'))
            msg = await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:", reply_markup=markup)
        elif callback_query.data == 'edit_phone':
            await Form.editing_phone.set()
            msg = await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        elif callback_query.data == 'edit_avatar':
            await Form.editing_avatar.set()
            msg = await bot.send_message(callback_query.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä:")
        elif callback_query.data == 'afisha_edit_city':
            await Form.afisha_editing_city.set()
            markup = InlineKeyboardMarkup(row_width=2)
            cities = await sync_to_async(City.objects.all)()
            cities = await sync_to_async(list)(cities)
            for city in cities:
                markup.insert(InlineKeyboardButton(city.name, callback_data=f'city_{city.id}'))
            msg = await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ñ–∏—à–∏", reply_markup=markup)
        await update_messages(bot, callback_query.message.chat.id, [msg.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ
@dp.message_handler(state=Form.editing_name)
async def process_edit_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
    user.first_name = message.text
    await sync_to_async(user.save)()
    await state.finish()
    await update_messages(bot, message.chat.id, [message.message_id])
    await show_profile(message)

@dp.message_handler(state=Form.editing_game_name)
async def process_edit_game_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
    user.nickname = message.text
    await sync_to_async(user.save)()
    await state.finish()
    await update_messages(bot, message.chat.id, [message.message_id])
    await show_profile(message)

@dp.callback_query_handler(lambda c: c.data.startswith('city_'), state=Form.editing_city)
async def process_edit_city(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    city_id = int(callback_query.data.split('_')[1])
    city = await sync_to_async(City.objects.get)(id=city_id)
    user_id = callback_query.from_user.id
    user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
    user.city = city
    await sync_to_async(user.save)()
    await state.finish()
    await update_messages(bot, callback_query.message.chat.id, [callback_query.message.message_id])
    await show_profile(callback_query)

@dp.callback_query_handler(lambda c: c.data.startswith('city_'), state=Form.afisha_editing_city)
async def process_afisha_edit_city(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    city_id = int(callback_query.data.split('_')[1])
    city = await sync_to_async(City.objects.get)(id=city_id)
    await state.finish()
    await update_messages(bot, callback_query.message.chat.id, [callback_query.message.message_id])
    await send_afisha(callback_query.message, city=city)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
@dp.message_handler(state=Form.editing_phone)
async def process_edit_phone(message: types.Message, state: FSMContext):
    phone_pattern = re.compile(r'^\+?\d{10,15}$')
    if not phone_pattern.match(message.text):
        msg = await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890 –∏–ª–∏ 1234567890.")
        await update_messages(bot, message.chat.id, [msg.message_id])
        return
    
    user_id = message.from_user.id
    user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
    user.phone = message.text
    await sync_to_async(user.save)()
    await state.finish()
    await update_messages(bot, message.chat.id, [message.message_id])
    await show_profile(message)

@dp.message_handler(content_types=['photo'], state=Form.editing_avatar)
async def process_edit_avatar(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
    # –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    file_info = await bot.get_file(message.photo[-1].file_id)
    file_path = file_info.file_path
    downloaded_file = await bot.download_file(file_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é media/avatars/
    with open(f"media/avatars/{message.photo[-1].file_id}.jpg", 'wb') as new_file:
        new_file.write(downloaded_file.getvalue())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user.avatar = f"avatars/{message.photo[-1].file_id}.jpg"
    await sync_to_async(user.save)()
    await state.finish()
    await update_messages(bot, message.chat.id, [message.message_id])
    await show_profile(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /poster
@dp.message_handler(commands=['poster'])
async def send_afisha(message: types.Message, city=None):
    user_id = message.chat.id
    user = await sync_to_async(CustomUser.objects.get)(username=str(user_id))
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Ç–µ–∫—É—â–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if city is None:
        city = await sync_to_async(getattr)(user, 'city')
    else:
        await bot.delete_message(message.chat.id, message.message_id)
    games = await sync_to_async(Game.objects.filter)(city=city)
    games = await sync_to_async(list)(games)
    if len(games) == 0:
        msg = await bot.send_message(message.chat.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –Ω–µ—Ç.\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_messages(bot, message.chat.id, [message.message_id, msg.message_id])
        return
    games_str = "\n\n"
    for game in games:
        games_str += f"–î–∞—Ç–∞: {game.datetime.strftime('%d %B %Y')} | –í—Ä–µ–º—è: {game.datetime.strftime('%H:%M')} | –ú–µ—Å—Ç–æ: {game.small_address}\n"
    game_buttons = [types.InlineKeyboardButton(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è "{game.small_address} {game.datetime.date()}"', callback_data=f'game_{game.id}') for game in games]
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞–∑–æ–º
    photo_paths = [
        os.path.join(settings.BASE_DIR, 'path_to_photo1.png'),
    ]
    media = [types.InputMediaPhoto(open(photo_path, 'rb')) for photo_path in photo_paths]
    msg1 = await bot.send_media_group(message.chat.id, media)
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    afisha_message = f"""
üé¨ <b>–ê—Ñ–∏—à–∞ –∏–≥—Ä Cyber Mafia</b>

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏–≥—Ä—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ {city.name_in_prepositional_case}! üìÖ –í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –∏ –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ –∫–∏–±–µ—Ä–ø–∞–Ω–∫–æ–≤–æ–º –º–∏—Ä–µ‚ö°

üìç –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:{games_str}
üëâ –ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∏–≥—Ä—É, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!
"""
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(*game_buttons)
    msg2 = await bot.send_message(message.chat.id, afisha_message, parse_mode="HTML", reply_markup=markup)
    msg3 = await bot.send_message(message.chat.id, "‚ú® –°–ª–µ–¥–∏ –∑–∞ –∞—Ñ–∏—à–µ–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –∏–≥—Ä—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, message.chat.id, [message.message_id, *[msg.message_id for msg in msg1], msg2.message_id, msg3.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@dp.callback_query_handler(lambda c: c.data.startswith('game_'))
async def show_game(callback_query: types.CallbackQuery):
    game_id = int(callback_query.data.split('_')[1])
    game = await sync_to_async(Game.objects.get)(id=game_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ Participant –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await sync_to_async(CustomUser.objects.get)(username=callback_query.message.chat.id)
    participant = await sync_to_async(Participant.objects.filter)(user=user, game=game)
    participant = await sync_to_async(lambda qs: qs.first())(participant)

    peculiarities = await sync_to_async(Peculiarity.objects.filter)(game=game)
    peculiarities = await sync_to_async(list)(peculiarities)

    peculiarities_str = ""
    for peculiarity in peculiarities:
        peculiarities_str += f"{peculiarity.label}: {peculiarity.value}\n"

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    game_message = f"""
üéÆ <b>–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã</b>

üóìÔ∏è <b>–î–∞—Ç–∞:</b> {game.datetime.strftime('%d %B %Y')}
üïí <b>–í—Ä–µ–º—è:</b> {game.datetime.strftime('%H:%M')}
üìç <b>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {game.address}

üîç <b>–î–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã:</b>
–¢–µ–º–∞: {game.theme}
–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {game.difficulty_level}
–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {game.duration}
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {game.max_players} —á–µ–ª–æ–≤–µ–∫ üë•

üåü <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
{peculiarities_str}
üí¨ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω –∫—Ä–∞—Ç–∫–∏–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –∏ –æ–±—ä—è—Å–Ω–µ–Ω—ã —Ä–æ–ª–∏üåÜ

üëâ <b>–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è?</b> –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –±–∏–ª–µ—Ç!
"""
    current_players = await sync_to_async(game.participants.count)()
    current_players = await sync_to_async(int)(current_players)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(f"–ò–≥—Ä–æ–∫–∏ {current_players}/{game.max_players}", callback_data=f'players_{game_id}')
    )
    if participant:
        markup.add(
            types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å –±—Ä–æ–Ω—å üìû", callback_data=f'remove_booking_{game_id}'),
        )
    else:
        markup.add(
            types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É üéüÔ∏è", callback_data=f'signup_{game_id}')
        )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if game.image:
        with open(game.image.path, 'rb') as photo:
            msg1 = await bot.send_photo(callback_query.message.chat.id, photo, caption=game_message, reply_markup=markup, parse_mode='HTML')
    else:
        msg1 = await bot.send_message(callback_query.message.chat.id, game_message, reply_markup=markup, parse_mode='HTML')

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º üîÑ", callback_data=f'go_poster'),
        types.InlineKeyboardButton(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô", callback_data=f'go_main')
    )
    msg2 = await bot.send_message(callback_query.message.chat.id, f"""üîô <b>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã</b>""", reply_markup=markup, parse_mode="HTML")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è InvalidQueryID
    try:
        await bot.answer_callback_query(callback_query.id)
    except InvalidQueryID:
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, callback_query.message.chat.id, [msg1.message_id, msg2.message_id])

@dp.callback_query_handler(lambda c: c.data.startswith('players_'))
async def show_players(callback_query: types.CallbackQuery):
    game_id = int(callback_query.data.split('_')[1])
    game = await sync_to_async(Game.objects.get)(id=game_id)
    current_players = await sync_to_async(game.participants.count)()
    current_players = await sync_to_async(int)(current_players)
    if current_players == 0:
        msg = await bot.send_message(callback_query.message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_messages(bot, callback_query.message.chat.id, [msg.message_id])
    else:
        participants = await sync_to_async(game.participants.all)()
        participants = await sync_to_async(list)(participants)

        media = []
        players_message = f"""
üë• <b>–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∏–≥—Ä—É Cyber Mafia</b>

üóìÔ∏è <b>–î–∞—Ç–∞ –∏–≥—Ä—ã:</b> {game.datetime.strftime('%d %B %Y')}
üïí <b>–í—Ä–µ–º—è:</b> {game.datetime.strftime('%H:%M')}
üìç <b>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {game.address}

<b>–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n"""
        for participant in participants:
            user = await sync_to_async(getattr)(participant, 'user')
        
            players_message += f"<b>{participant.user.first_name}</b>{f' ‚Äî —É—Ä–æ–≤–µ–Ω—å: {participant.user.level.name}' if participant.user.level else ''}\n"
            if user.avatar:
                with open(user.avatar.path, 'rb') as photo:
                    photo_data = io.BytesIO(photo.read())
                    media.append(types.InputMediaPhoto(media=photo_data))
        
        user = await sync_to_async(CustomUser.objects.get)(username=callback_query.message.chat.id)
        participant = await sync_to_async(Participant.objects.filter)(user=user, game=game)
        participant = await sync_to_async(lambda qs: qs.first())(participant)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø–æ–π
        if media:
            msg = await bot.send_media_group(callback_query.message.chat.id, media)
        else:
            msg = {"message_id": None}
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        if participant:
            players_message += f"""\nüìà –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: 10 –∏–∑ 15

üì≤ <b>–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å–≤—è–∂–∏—Å—å —Å –Ω–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.</b>
"""
            markup.add(
                types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å –±—Ä–æ–Ω—å üìû", callback_data=f'remove_booking_{game_id}'),
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–µ üîÑ", callback_data=f'game_{game_id}'),
            )
        else:
            players_message += f"""\nüìà –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: 10 –∏–∑ 15

‚ú® <b>–ï—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è? –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –∏ —Å—Ç–∞–Ω—å —á–∞—Å—Ç—å—é –∫–∏–±–µ—Ä–ø–∞–Ω–∫-–∏–≥—Ä—ã!</b>
"""
            markup.add(
                types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É üéüÔ∏è", callback_data=f'signup_{game_id}'),
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–µ üîÑ", callback_data=f'game_{game_id}'),
            )

        msg1 = await bot.send_message(callback_query.message.chat.id, players_message, parse_mode='HTML', reply_markup=markup)

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton(f"–ê—Ñ–∏—à–∞ –∏–≥—Ä üéüÔ∏è", callback_data=f'go_poster'),
            types.InlineKeyboardButton(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô", callback_data=f'go_main')
        )
        msg2 = await bot.send_message(callback_query.message.chat.id, f"""üîô <b>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞—Ñ–∏—à–µ –∏–≥—Ä</b>""", reply_markup=markup, parse_mode="HTML")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_messages(bot, callback_query.message.chat.id, [*[m.message_id for m in msg], msg1.message_id, msg2.message_id])

    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith('signup_'))
async def signup_for_game(callback_query: types.CallbackQuery, state: FSMContext):
    game_id = int(callback_query.data.split('_')[1])
    game = await sync_to_async(Game.objects.get)(id=game_id)
    current_players = await sync_to_async(game.participants.count)()
    current_players = await sync_to_async(int)(current_players)
    if current_players < game.max_players:
        game = await sync_to_async(Game.objects.get)(id=game_id)
        user = await sync_to_async(CustomUser.objects.get)(username=callback_query.from_user.id)
        await sync_to_async(Participant.objects.create)(user=user, game=game)

        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å –±—Ä–æ–Ω—å üìû", callback_data=f'remove_booking_{game_id}'),
            types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–µ üîÑ", callback_data=f'game_{game_id}'),
        )

        msg = await bot.send_message(callback_query.message.chat.id, f"""
<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –∏–≥—Ä—É!</b>
                               
üóìÔ∏è <b>–î–∞—Ç–∞ –∏–≥—Ä—ã:</b> {game.datetime.strftime('%d %B %Y')}
üïí <b>–í—Ä–µ–º—è:</b> {game.datetime.strftime('%H:%M')}
üìç <b>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {game.address}

üîî <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
    <b>–ü—Ä–∏—Ö–æ–¥–∏ –≤–æ–≤—Ä–µ–º—è!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å –Ω–∞ –º–µ—Å—Ç–µ –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è. ‚è∞
    <b>–ü–æ–º–Ω–∏ –ø—Ä–æ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É!</b> –û–¥–µ–≤–∞–π—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. üåå
    <b>–í–æ–∑—å–º–∏ —Å —Å–æ–±–æ–π:</b> —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –±–æ–µ–≤–æ–π –¥—É—Ö! üí™
üì≤ <b>–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å–≤—è–∂–∏—Å—å —Å –Ω–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.</b>
""", parse_mode='HTML', reply_markup=markup)
        await bot.answer_callback_query(callback_query.id)
        await state.finish()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_messages(bot, callback_query.message.chat.id, [msg.message_id])
    else:
        msg = await bot.send_message(callback_query.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –º–µ—Å—Ç–∞ –Ω–∞ –∏–≥—Ä—É —É–∂–µ –∑–∞–Ω—è—Ç—ã.")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_messages(bot, callback_query.message.chat.id, [msg.message_id])

    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith('remove_booking_'))
async def remove_booking(callback_query: types.CallbackQuery, state: FSMContext):
    game_id = int(callback_query.data.split('_')[2])
    game = await sync_to_async(Game.objects.get)(id=game_id)
    user = await sync_to_async(CustomUser.objects.get)(username=callback_query.message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ Participant –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    participant = await sync_to_async(Participant.objects.filter)(user=user, game=game)
    participant = await sync_to_async(lambda qs: qs.first())(participant)

    if participant:
        # # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –∏ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # game.current_players -= (participant.friends_count + 1)
        # await sync_to_async(game.save)()

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å Participant
        await sync_to_async(participant.delete)()

        msg = await bot.send_message(callback_query.message.chat.id, "–ë—Ä–æ–Ω—å —Å–Ω—è—Ç–∞.")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_messages(bot, callback_query.message.chat.id, [msg.message_id])
    else:
        msg = await bot.send_message(callback_query.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏ –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_messages(bot, callback_query.message.chat.id, [msg.message_id])

    await bot.answer_callback_query(callback_query.id)

    await state.finish()
    await show_game(types.CallbackQuery(data=f'game_{game.id}', message=callback_query.message))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /statistic
@dp.message_handler(commands=['statistic'])
async def send_statistic_link(message: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(f"–ê—Ñ–∏—à–∞ –∏–≥—Ä üéüÔ∏è", callback_data=f'go_poster'),
        types.InlineKeyboardButton(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô", callback_data=f'go_main')
    )
    msg = await bot.send_message(message.chat.id, f"""
üìä <b>–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
                           
–í–æ—Ç —Ç–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–∞—Ö Cyber Mafia! üéÆ
                                 
        <b>–í—Å–µ–≥–æ –∏–≥—Ä:</b> 15 üé≤
        <b>–ü–æ–±–µ–¥:</b> 8 üèÜ
        <b>–õ—É—á—à–∏–µ —Ä–æ–ª–∏:</b>
                –•–∞–∫–µ—Ä (3 –ø–æ–±–µ–¥—ã) üíª
                –ö–∏–±–µ—Ä–¥–µ—Ç–µ–∫—Ç–∏–≤ (2 –ø–æ–±–µ–¥—ã) üîç
                –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —à–ø–∏–æ–Ω (3 –ø–æ–±–µ–¥—ã) üïµÔ∏è‚Äç‚ôÇÔ∏è
        <b>–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è:</b> 85% üîí
        <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> 7 –∏–≥—Ä –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü üìÖ
                           
üî• <b>–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏ –ø–æ–≤—ã—à–∞–π —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ Cyber Mafia!</b>

üìù <b>–•–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º –∏–≥—Ä–∞–º –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–∏–º!</b>
""", reply_markup=markup, parse_mode='HTML')
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, message.chat.id, [message.message_id, msg.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /myclub
@dp.message_handler(commands=['myclub'])
async def send_myclub_link(message: types.Message, state=FSMContext):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É ‚úâÔ∏è", callback_data="chat_participant"))
    msg1 = await bot.send_message(message.chat.id, f"""
üë• <b>–ß–ª–µ–Ω—ã –∫–ª—É–±–∞ Cyber Mafia</b>
                           
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª—É–±–∞ Cyber Mafia –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ. –ù–∞–π–¥–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π, —Å–æ—é–∑–Ω–∏–∫–æ–≤ –∏–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤! ü§ù
                           
üîç <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>
                           
        <b>–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤</b> ‚Äî –£—Ä–æ–≤–µ–Ω—å: –≠–∫—Å–ø–µ—Ä—Ç üåü | –ü–æ–±–µ–¥: 20 üèÜ
        <b>–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞</b> ‚Äî –£—Ä–æ–≤–µ–Ω—å: –í–µ—Ç–µ—Ä–∞–Ω üèÖ | –ü–æ–±–µ–¥: 18 üèÜ
        <b>–î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤</b> ‚Äî –£—Ä–æ–≤–µ–Ω—å: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π üåü | –ü–æ–±–µ–¥: 15 üèÜ
        <b>–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞</b> ‚Äî –£—Ä–æ–≤–µ–Ω—å: –ù–æ–≤–∏—á–æ–∫ ü•â | –ü–æ–±–µ–¥: 5 üèÜ
                           
üë• <b>–î—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</b>
                           
        <b>–û–ª—å–≥–∞ –§–µ–¥–æ—Ä–æ–≤–∞</b> ‚Äî –£—Ä–æ–≤–µ–Ω—å: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π üåü
        <b>–í–∏–∫—Ç–æ—Ä –ö—Ä—ã–ª–æ–≤</b> ‚Äî –£—Ä–æ–≤–µ–Ω—å: –ù–æ–≤–∏—á–æ–∫ ü•â
        <b>–ò—Ä–∏–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞</b> ‚Äî –£—Ä–æ–≤–µ–Ω—å: –≠–∫—Å–ø–µ—Ä—Ç üåü
                           
‚ú® <b>–°–≤—è–∂–∏—Å—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ —É–∫—Ä–µ–ø–ª—è–π —Å–≤–æ–∏ —Å–≤—è–∑–∏ –≤ –∫–ª—É–±–µ!</b>
""", reply_markup=markup, parse_mode='HTML')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô", callback_data="go_main"))
    msg2 = await bot.send_message(message.chat.id, f"""
üîô <b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
""", reply_markup=markup, parse_mode='HTML')
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, message.chat.id, [message.message_id, msg1.message_id, msg2.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rules
@dp.message_handler(commands=['rules'])
async def send_rules_link(message: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–°—Å—ã–ª–∫–∞", url='https://google.com'),
    )
    msg1 = await bot.send_message(message.chat.id, """
üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã Cyber Mafia</b>
                           
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä Cyber Mafia! –ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π —Ö–æ–¥ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ä–µ—à–∞—é—â–∏–º, –∞ –∫–∞–∂–¥–∞—è —Ä–æ–ª—å ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω–æ–π. –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, —á—Ç–æ–±—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º –∫ –ª—é–±—ã–º –ø–æ–≤–æ—Ä–æ—Ç–∞–º —Å–æ–±—ã—Ç–∏–π. üîÑ
                           
<b>–¶–µ–ª—å –∏–≥—Ä—ã:</b> –í—ã—è–≤–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è "–ú–∞—Ñ–∏–µ–π", –∏–ª–∏, –µ—Å–ª–∏ —Ç—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ "–ú–∞—Ñ–∏–∏", —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π. üïµÔ∏è‚Äç‚ôÇÔ∏èüî™
                           
<b>–†–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤:</b>
                           
        <b>–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏</b> üèòÔ∏è ‚Äî –¥–æ–ª–∂–Ω—ã –≤—ã—á–∏—Å–ª–∏—Ç—å "–ú–∞—Ñ–∏—é" –∏ –≤—ã–∂–∏—Ç—å.
        <b>–ú–∞—Ñ–∏—è</b> üíÄ ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–Ω–∏, —É—Å—Ç—Ä–∞–Ω—è—è –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π.
        <b>–•–∞–∫–µ—Ä—ã</b> üíª ‚Äî –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–∞—Ö.
        <b>–ö–∏–±–µ—Ä–¥–µ—Ç–µ–∫—Ç–∏–≤—ã</b> üîç ‚Äî —Ä–∞—Å—Å–ª–µ–¥—É—é—Ç –∏ –∑–∞—â–∏—â–∞—é—Ç –≥–æ—Ä–æ–¥ –æ—Ç –∫–∏–±–µ—Ä—É–≥—Ä–æ–∑.
        <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —à–ø–∏–æ–Ω—ã</b> üïµÔ∏è‚Äç‚ôÄÔ∏è ‚Äî –∏–≥—Ä–∞—é—Ç –¥–≤–æ–π–Ω—É—é –∏–≥—Ä—É, –ø–æ–º–æ–≥–∞—è –æ–±–µ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º.
                           
<b>–≠—Ç–∞–ø—ã –∏–≥—Ä—ã:</b>
                           
        <b>–î–µ–Ω—å</b> ‚òÄÔ∏è ‚Äî –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –∫—Ç–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª–µ–Ω.
        <b>–ù–æ—á—å</b> üåô ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏ (–ú–∞—Ñ–∏—è, –•–∞–∫–µ—Ä—ã, –î–µ—Ç–µ–∫—Ç–∏–≤—ã) –¥–µ–ª–∞—é—Ç —Å–≤–æ–∏ —Ö–æ–¥—ã.
                            
<b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:</b> –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –∏–≥—Ä–æ–∫–∏ –≥–æ–ª–æ—Å—É—é—Ç, –∫–æ–≥–æ –∏–∑ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –∏–≥—Ä—ã. üö´
                           
<b>–ü–æ–±–µ–¥–∞:</b> –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ "–ú–∞—Ñ–∏—è" –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –µ—Å–ª–∏ "–ú–∞—Ñ–∏—è" —á–∏—Å–ª–µ–Ω–Ω–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π. üèÜ

üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏–ª–∏ –≤ –∏–≥—Ä–µ!
""", reply_markup=markup, parse_mode="HTML")
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô", callback_data='go_main')
    )
    msg2 = await bot.send_message(message.chat.id, """
üîô <b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
""", reply_markup=markup, parse_mode="HTML")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_messages(bot, message.chat.id, [message.message_id, msg1.message_id, msg2.message_id])

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)